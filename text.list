     1                                  section .data
     2                                  
     3 00000000 D092D0B2D0B5D0B4D0-         message1:  db "Введите a или b",0xa,0  ;сообщение вопроса, адрес начала строки
     3 00000009 B8D182D0B5206120D0-
     3 00000012 B8D0BBD0B820620A00 
     4                                      ln1 equ $-message1                              ;длина сообщения
     5                                                                                      ;0xa - перенос строки
     6                                                                                      ;0 - не обязателен, но иногда может понадобиться, например при работе с C
     7                                  
     8 0000001B D092D18B20D0B2D0B2-         message2: db "Вы ввели a!",0xa,0               ;сообщение ответа, адрес начала строки
     8 00000024 D0B5D0BBD0B8206121-
     8 0000002D 0A00               
     9                                      ln2 equ $-message2                          ;длина сообщения
    10                                  
    11 0000002F D092D18B20D0B2D0B2-         message3:  db "Вы ввели b!",0xa,0               ;сообщение ответа, адрес начала строки
    11 00000038 D0B5D0BBD0B8206221-
    11 00000041 0A00               
    12                                      ln3 equ $-message3                          ;длина сообщения
    13                                  
    14 00000043 <res 00000001>              enter: resb 1                                ;выделение памяти в 1 байт переменной enter
    14          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing
    15                                      lne equ $-enter                            ;длина сообщения
    16                                  
    17                                  
    18                                  ;начало самой программы
    19                                  section .text
    20                                      global _start
    21                                      _start:
    22                                  again:
    23                                  ;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
    24 00000000 B9[00000000]            mov ecx, message1       ;в ecx помещается адрес первого символа переменной
    25 00000005 BA1B000000              mov edx, ln1            ;в edx помещается количество символов в переменной
    26 0000000A B804000000              mov eax,4       ;эта строка №1 обязательна для вывода!
    27 0000000F BB01000000              mov ebx,1       ;эта строка №2 обязательна для вывода!
    28 00000014 CD80                    int 0x80        ;эта строка №3 обязательна для вывода!
    29                                  
    30                                  ;действия для ввода содержимого по умолчанию с началом в ecx, с длиной edx - ввод ответа
    31 00000016 B803000000              mov eax, 3         ;эта строка №1 обязательна для ввода!
    32 0000001B BB00000000              mov ebx, 0         ;эта строка №2 обязательна для ввода!
    33                                  
    34 00000020 B9[43000000]            mov ecx, enter   ;в ecx помещается адрес первого символа из enter
    35 00000025 BA01000000              mov edx, lne       ;в edx помещается количество символов в переменной, остальные заполнятся нулями
    36                                  
    37 0000002A CD80                    int 0x80           ;эта строка №3 обязательна для ввода!
    38                                  
    39                                  ;действия для сравнения содержимого
    40 0000002C 67803961                 cmp byte [ecx], 'a';при вводе данных через клавиатуру в ecx помещается адрес первого символа из всех существующих
    41                                                          ;поэтому при выводе надо указывать ecx в квадратных скобках, так как это адрес символа  [ecx]
    42                                                          ;и обязательно указывать размер, в данном случае byte, так как изначально резервировался размер в байтах res
    43                                  
    44                                  
    45 00000030 7402                        je m1                 ;если введено a
    46 00000032 750C                        jne m2                 ;если введено не a
    47                                  
    48                                  m1:                      ;переходит сюда, если введено a
    49                                  
    50 00000034 B9[1B000000]                mov ecx,message2
    51 00000039 BA14000000                  mov edx,ln2
    52 0000003E EB12                        jmp exit              ;переход к метке exit
    53                                  
    54                                  
    55                                  m2:                    ;переходит сюда, если введено не a
    56 00000040 67803962                cmp byte [ecx], 'b'    ;при вводе данных через клавиатуру в ecx помещается адрес первого символа из всех существующих
    57 00000044 7402                    je m3                  ;если введено b
    58 00000046 75B8                    jne again                 ;переход к метке again, если введено не b
    59                                  
    60                                  m3:
    61 00000048 B9[2F000000]                mov ecx,message3
    62 0000004D BA14000000                  mov edx,ln3
    63                                      ;jmp exit              ;переход к метке exit, (тут в принципе прыгать не надо)
    64                                  
    65                                  
    66                                  
    67                                  exit:
    68                                  ;вывод содержимого ecx
    69 00000052 B804000000              mov eax,4       ;эта строка №1 обязательна для вывода!
    70 00000057 BB01000000              mov ebx,1       ;эта строка №2 обязательна для вывода!
    71 0000005C CD80                    int 0x80        ;эта строка №3 обязательна для вывода!
    72                                  
    73 0000005E 66B80100                mov ax,1             ;выход
    74 00000062 CD80                        int 0x80
