     1                                  section .data
     2                                  
     3 00000000 D092D0B2D0B5D0B4D0-         message1:  db "Введите 5 символов:",0xa,0  ;сообщение вопроса, адрес начала строки
     3 00000009 B8D182D0B5203520D1-
     3 00000012 81D0B8D0BCD0B2D0BE-
     3 0000001B D0BBD0BED0B23A0A00 
     4                                      ln1 equ $-message1                              ;длина сообщения
     5                                                                                      ;0xa - перенос строки
     6                                                                                      ;0 - не обязателен, но иногда может понадобиться, например при работе с C
     7                                  
     8 00000024 <res 00000005>              enter: resb 5                                ;выделение памяти в 5 байт переменной enter
     8          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing
     9                                      lne equ $-enter                            ;длина сообщения
    10                                  
    11                                  
    12                                  ;начало самой программы
    13                                  section .text
    14                                      global _start
    15                                      _start:
    16                                  
    17                                  
    18                                  ;действия для вывода содержимого
    19 00000000 B804000000              mov eax,4         ;номер функции
    20 00000005 BB01000000              mov ebx,1         ;параметр №1 с обязательным номером
    21 0000000A B9[00000000]            mov ecx, message1 ;параметр №2 с адресом первого символа переменной
    22 0000000F BA24000000              mov edx, ln1      ;параметр №3 с количеством символов в переменной
    23 00000014 CD80                    int 0x80           ;запуск функции
    24                                  
    25                                  ;действия для ввода содержимого
    26 00000016 B803000000              mov eax, 3         ;номер функции для ввода
    27 0000001B BB00000000              mov ebx, 0         ;параметр №1 с обязательным номером для ввода (const)
    28 00000020 B9[24000000]            mov ecx, enter     ;параметр №2 с адресом первого символа enter
    29 00000025 BA05000000              mov edx, lne       ;параметр №3 с количеством символов в переменной, остальные заполнятся нулями
    30 0000002A CD80                    int 0x80           ;запуск функции
    31                                  
    32                                  
    33                                  ;Особенности:
    34                                  ;ecx - двойное использование для адреса переменной и для подсчета в цикле
    35                                  ;будем использовать регистры esi и edi
    36                                  ;esi - для адреса
    37                                  ;edi - для подсчета циклов
    38                                  
    39                                  
    40                                  ;Алгоритм:
    41 0000002C 89CE                    mov esi,ecx ; перенос адреса первого символа в esi
    42 0000002E 83C605                  add esi,lne ; присвоение esi адреса последнего символа
    43 00000031 BF05000000              mov edi,lne ; присвоение edi количество циклов
    44 00000036 89F9                    mov ecx,edi ; запускаем цикл, помещае в ecx количество проходов
    45                                  Repeat:     ;ставим метку Repeat:
    46                                  
    47                                  
    48                                  ;действия для вывода содержимого
    49 00000038 89CF                    mov edi,ecx       ; помещаем количество циклов в edi
    50 0000003A 83EE01                  sub esi,1         ;уменьшаем адрес символа на 1
    51 0000003D 89F1                    mov ecx,esi       ;помещаем в ecx новый адрес символа
    52 0000003F B804000000              mov eax,4         ;номер функции для вывода
    53 00000044 BB01000000              mov ebx,1         ;параметр №1 с обязательным номером для вывода (const)
    54 00000049 89F1                    mov ecx,esi       ;параметр №2 с адресом первого символа переменной, помещаем в ecx адрес последнего символа
    55 0000004B BA01000000              mov edx,1         ;параметр №3 с количеством символов в переменной, выводим один символ
    56 00000050 CD80                    int 0x80          ;запуск функции
    57                                  ;sub ecx,1         ;уменьшаем адрес символа на 1 байт
    58 00000052 89CE                    mov esi,ecx       ;помещаем адрес следующего символа в esi
    59 00000054 89F9                    mov ecx,edi       ;помещаем в ecx количество проходов из edi
    60 00000056 E2E0                    loop Repeat       ; повторяем цикл Repeat, при этом значение ecx уменьшается на 1
    61                                  
    62                                  
    63                                  
    64                                  ;mov ecx,5 ; в ecx помещается количество циклов, например с 5-4-3-2-1 и на 0 цикл завершится
    65                                  ;Repeat:                 ;начало цикла Repeat
    66                                  ;push ecx ; не работает в 64 бит системе
    67                                  ;sub ecx,1            ;loop и так означает уменьшение ecx на 1 каждый цикл до нуля - по умолчанию!
    68                                  ;loop Repeat ; повтор цикла Repeat    повторить ecx раз
    69                                  ;add увеличить
    70                                  ;sub уменьшить
    71                                  
    72                                  
    73                                  
    74                                  
    75                                  
    76                                  
    77                                  
    78                                  
    79 00000058 B801000000              mov eax,1         ;номер функции для выхода из программы
    80 0000005D CD80                    int 0x80          ;запуск функции
    81                                  
    82                                  
    83                                  
    84                                  
    85                                  
    86                                  
    87                                  
    88                                  
    89                                  
    90                                  
    91                                  
    92                                  
    93                                  
    94                                  
    95                                                                      ;Образцы:
    96                                  
    97                                  
    98                                                                      ;32-битный код
    99                                                                        ;mov eax,function_number
   100                                                                        ;mov ebx,param_1  ; если есть
   101                                                                        ;mov ecx,param_2  ; если есть
   102                                                                        ;mov edx,param_3  ; если есть
   103                                                                        ;mov esi,param_4  ; если есть
   104                                                                        ;mov edi,param_5  ; если есть
   105                                                                        ;mov ebp,param_6  ; если есть
   106                                                                        ;int 0x80  ; вызов!
   107                                  
   108                                  
   109                                  ;add rcx,lne
   110                                  
   111                                  ;после этого вывода еще не происходит
   112                                  
   113                                  
   114                                  
   115                                  ;mov rax,4       ;эта строка №1 обязательна для вывода!
   116                                  ;mov rbx,1       ;эта строка №2 обязательна для вывода!
   117                                  ;int 0x80        ;эта строка №3 обязательна для вывода!
   118                                  
   119                                  ;push enter
   120                                  ;pop rcx
   121                                  
   122                                    ;Системный вызов через инструкцию sysenter
   123                                    ;Осуществляется быстрее, но немного сложнее и поддерживается только процессорами Pentium II и старше
   124                                    ;В регистр EAX загружается номер функции.
   125                                    ;Параметры (зависящие от функции) загружаются в регистры EBX (первый параметр), ECX (второй), EDX (третий),
   126                                    ; ESI (четвёртый), EDI (пятый).
   127                                  
   128                                    ;В стек заносится адрес возврата и регистры ECX, EDX, EBP (именно в таком порядке).
   129                                    ;В регистр EBP загружается значение ESP.
   130                                    ;Выполняется инструкция sysenter.
   131                                  
   132                                  
   133                                    ;  mov eax,function_number
   134                                    ;  mov ebx,param_1  ; если есть
   135                                      ;mov ecx,param_2  ; если есть
   136                                    ;  mov edx,param_3  ; если есть
   137                                    ;  mov esi,param_4  ; если есть
   138                                    ;  mov edi,param_5  ; если есть
   139                                    ;  push .ret  ; адрес возврата
   140                                    ;  push ecx   ; сохранение этих регистров требуется системой
   141                                    ;  push edx
   142                                    ;  push ebp
   143                                    ;  mov ebp,esp
   144                                    ;  sysenter  ; вызов!
   145                                  ;  .ret:
   146                                  
   147                                  
   148                                  
   149                                  
   150                                  ;64-битный код
   151                                    ;mov rax,function_number
   152                                    ;mov rdi,param_1  ; если есть
   153                                    ;mov rsi,param_2  ; если есть
   154                                    ;mov rdx,param_3  ; если есть
   155                                    ;mov r10,param_4  ; если есть
   156                                    ;mov r8,param_5   ; если есть
   157                                    ;mov r9,param_6   ; если есть
   158                                    ;syscall  ; вызов! (регистры RCX и R11 будут уничтожены)
   159                                  
   160                                    ;надо пробовать через push и pop, т.е. стек
   161                                  
   162                                    ;mov ecx , 100 ; количество проходов
   163                                    ;inc esi ; перемещение указателей к
   164                                    ;inc ebx ; следующим элементам буфера
