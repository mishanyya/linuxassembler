     1                                  section .data
     2                                  
     3 00000000 D09FD0BED0BBD0B4D0-         message1:  db "Полдень прошел?(Y/N)",0xa,0 ;сообщение вопроса, адрес начала строки
     3 00000009 B5D0BDD18C20D0BFD1-
     3 00000012 80D0BED188D0B5D0BB-
     3 0000001B 3F28592F4E290A00   
     4                                      ln1 equ $-message1                          ;длина сообщения
     5                                                                                    ;0xa - перенос строки
     6                                                                                    ;0 - не обязателен, но иногда может понадобиться, например при работе с C
     7                                  
     8 00000023 0AD094D0BED0B1D180-         message2: db 0xa,"Доброе утро!",0xa,0               ;сообщение ответа, адрес начала строки
     8 0000002C D0BED0B520D183D182-
     8 00000035 D180D0BE210A00     
     9                                      ln2 equ $-message2                          ;длина сообщения
    10                                  
    11 0000003C 0AD094D0BED0B1D180-         message3:  db 0xa,"Добрый день!",0xa,0               ;сообщение ответа, адрес начала строки
    11 00000045 D18BD0B920D0B4D0B5-
    11 0000004E D0BDD18C210A00     
    12                                      ln3 equ $-message3                          ;длина сообщения
    13                                  
    14 00000055 0AD092D0B2D0B5D0B4-         message4:  db 0xa,"Введите Y или N",0xa,0               ;сообщение ответа, адрес начала строки
    14 0000005E D0B8D182D0B5205920-
    14 00000067 D0B8D0BBD0B8204E0A-
    14 00000070 00                 
    15                                      ln4 equ $-message4                          ;длина сообщения
    16                                  
    17 00000071 <res 00000001>              enter: resb 1                                ;выделение памяти в 1 байт переменной enter
    17          ******************       warning: uninitialized space declared in non-BSS section `.data': zeroing
    18                                      lne equ $-enter                            ;длина сообщения
    19                                  
    20                                  
    21                                  ;начало самой программы
    22                                  section .text
    23                                      global _start
    24                                      _start:
    25                                  
    26                                  ;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
    27 00000000 B9[00000000]            mov ecx, message1       ;в ecx помещается адрес первого символа переменной
    28 00000005 BA23000000              mov edx, ln1            ;в edx помещается количество символов в переменной
    29 0000000A B804000000              mov eax,4       ;эта строка №1 обязательна для вывода!
    30 0000000F BB01000000              mov ebx,1       ;эта строка №2 обязательна для вывода!
    31 00000014 CD80                    int 0x80        ;эта строка №3 обязательна для вывода!
    32                                  
    33                                  
    34                                  ;действия для ввода содержимого по умолчанию с началом в ecx, с длиной edx - ввод ответа
    35 00000016 B803000000              mov eax, 3         ;эта строка №1 обязательна для ввода!
    36 0000001B BB00000000              mov ebx, 0         ;эта строка №2 обязательна для ввода!
    37                                  
    38                                  ;mov ecx, enter   ;в ecx помещается адрес первого символа из enter
    39 00000020 BA01000000              mov edx, lne       ;в edx помещается количество символов в переменной, остальные заполнятся нулями
    40                                  
    41 00000025 CD80                    int 0x80           ;эта строка №3 обязательна для ввода!
    42                                  
    43                                  
    44                                  
    45                                  ;push rcx    ;из регистра rcx отправляем значение в стек; ax-для 16b ,eax-для 32b,rcx-для 64b систем,
    46                                  ;pop rcx     ;из стека помещаем значение в регистр ecx
    47                                  
    48                                  
    49                                  ;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод ответа
    50 00000027 B804000000              mov eax,4       ;эта строка №1 обязательна для вывода!
    51 0000002C BB01000000              mov ebx,1       ;эта строка №2 обязательна для вывода!
    52 00000031 CD80                    int 0x80        ;эта строка №3 обязательна для вывода!
    53                                  
    54                                  ;увеличение содержимого по этому адресу на значение 1
    55                                  ;add byte [ecx],1;
    56                                  
    57                                  ;действия для сравнения содержимого
    58 00000033 67803959                 cmp byte [ecx], 'Y';при вводе данных через клавиатуру в ecx помещается адрес первого символа из всех существующих
    59                                                          ;поэтому при выводе надо указывать ecx в квадратных скобках, так как это адрес символа  [ecx]
    60                                                          ;и обязательно указывать размер, в данном случае byte, так как изначально резервировался размер в байтах res
    61                                  
    62                                  
    63 00000037 7402                        je m1                 ;если введено Y
    64 00000039 750C                        jne m2                 ;если введено не Y
    65                                  
    66                                  m1:                      ;переходит сюда, если введено 1
    67                                  
    68 0000003B B9[23000000]                mov ecx,message2
    69 00000040 BA19000000                  mov edx,ln2
    70 00000045 EB20                        jmp exit              ;переход к метке exit
    71                                  
    72                                  
    73                                  m2:            ;переходит сюда, если введено не Y
    74 00000047 6780394E                cmp byte [ecx], 'N';при вводе данных через клавиатуру в ecx помещается адрес первого символа из всех существующих
    75 0000004B 7402                    je m3                 ;если введено N
    76 0000004D 750C                    jne m4                 ;если введено не N
    77                                  
    78                                  m3:
    79 0000004F B9[3C000000]                mov ecx,message3
    80 00000054 BA19000000                  mov edx,ln3
    81 00000059 EB0C                        jmp exit              ;переход к метке exit
    82                                  
    83                                    m4:
    84 0000005B B9[55000000]                    mov ecx,message4
    85 00000060 BA1C000000                      mov edx,ln4
    86 00000065 EB99                            jmp _start              ;переход к метке _start
    87                                  
    88                                  
    89                                  exit:
    90                                  ;вывод содержимого ecx
    91 00000067 B804000000              mov eax,4       ;эта строка №1 обязательна для вывода!
    92 0000006C BB01000000              mov ebx,1       ;эта строка №2 обязательна для вывода!
    93 00000071 CD80                    int 0x80        ;эта строка №3 обязательна для вывода!
    94                                  
    95 00000073 66B80100                mov ax,1             ;выход
    96 00000077 CD80                        int 0x80
